"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import IndustrialMissionCard from "./IndustrialMissionCard";
import { StoryNode, Connection, SavedStoryMode } from "./types";
import { getNodeSize, getNodeIcon } from "../../../lib/story-tree-utils";

export default function StoryClimbPage() {
  const router = useRouter();
  const [nodes, setNodes] = useState<StoryNode[]>([]);
  const [connections, setConnections] = useState<Connection[]>([]);
  const [selectedNode, setSelectedNode] = useState<StoryNode | null>(null);
  const [hoveredNode, setHoveredNode] = useState<string | null>(null);
  const [currentNodeIndex, setCurrentNodeIndex] = useState(0);
  const [savedTrees, setSavedTrees] = useState<SavedStoryMode[]>([]);
  const [currentTree, setCurrentTree] = useState<string>('');
  const [canvasDimensions, setCanvasDimensions] = useState({ width: 1000, height: 1000 });
  const canvasRef = useRef<HTMLDivElement>(null);
  const [isMapPanning, setIsMapPanning] = useState(false);
  const [mapOffset, setMapOffset] = useState({ x: 0, y: 0 });
  const [zoomLevel, setZoomLevel] = useState(1);

  // Track canvas dimensions
  useEffect(() => {
    const updateDimensions = () => {
      if (canvasRef.current) {
        setCanvasDimensions({
          width: canvasRef.current.offsetWidth || 1000,
          height: canvasRef.current.offsetHeight || 1000
        });
      }
    };

    updateDimensions();
    window.addEventListener('resize', updateDimensions);
    return () => window.removeEventListener('resize', updateDimensions);
  }, []);

  // Load saved trees
  useEffect(() => {
    const saved = localStorage.getItem('storyClimbTrees');
    if (saved) {
      const trees = JSON.parse(saved);
      setSavedTrees(trees);
      if (trees.length > 0 && !currentTree) {
        loadTree(trees[0]);
      }
    } else {
      // Create default tree
      const defaultTree: SavedStoryMode = {
        name: "Chapter 1",
        chapter: 1,
        data: {
          nodes: [
            { id: 'start', x: 0, y: 100, label: 'START', storyNodeType: 'normal' },
            { id: 'node-1', x: -150, y: 250, label: 'Scout Path', storyNodeType: 'normal' },
            { id: 'node-2', x: 150, y: 250, label: 'Combat Path', storyNodeType: 'normal' },
            { id: 'node-3', x: 0, y: 400, label: 'Convergence', storyNodeType: 'event' },
            { id: 'node-4', x: -150, y: 550, label: 'Left Route', storyNodeType: 'normal' },
            { id: 'node-5', x: 150, y: 550, label: 'Right Route', storyNodeType: 'normal' },
            { id: 'node-6', x: 0, y: 700, label: 'Elite Guard', storyNodeType: 'boss' },
            { id: 'node-7', x: -100, y: 850, label: 'Supply Cache', storyNodeType: 'event' },
            { id: 'node-8', x: 100, y: 850, label: 'Preparation', storyNodeType: 'normal' },
            { id: 'node-9', x: 0, y: 1000, label: 'Chapter Boss', storyNodeType: 'final_boss' },
          ],
          connections: [
            { from: 'start', to: 'node-1' },
            { from: 'start', to: 'node-2' },
            { from: 'node-1', to: 'node-3' },
            { from: 'node-2', to: 'node-3' },
            { from: 'node-3', to: 'node-4' },
            { from: 'node-3', to: 'node-5' },
            { from: 'node-4', to: 'node-6' },
            { from: 'node-5', to: 'node-6' },
            { from: 'node-6', to: 'node-7' },
            { from: 'node-6', to: 'node-8' },
            { from: 'node-7', to: 'node-9' },
            { from: 'node-8', to: 'node-9' },
          ]
        }
      };
      setSavedTrees([defaultTree]);
      loadTree(defaultTree);
      localStorage.setItem('storyClimbTrees', JSON.stringify([defaultTree]));
    }
  }, []);

  const loadTree = (tree: SavedStoryMode) => {
    setCurrentTree(tree.name);
    
    // Process nodes for play mode
    const processedNodes = tree.data.nodes.map((node, index) => ({
      ...node,
      index: index,
      completed: index < currentNodeIndex,
      available: index <= currentNodeIndex + 1,
      current: index === currentNodeIndex,
    }));
    
    setNodes(processedNodes);
    setConnections(tree.data.connections);
    
    // Select start node
    const startNode = processedNodes.find(n => n.id === 'start' || n.current);
    if (startNode) {
      setSelectedNode(startNode);
    }
  };

  const handleNodeClick = (node: StoryNode) => {
    if (node.completed || node.available || node.current) {
      setSelectedNode(node);
    }
  };

  const handleStartMission = () => {
    if (selectedNode?.available || selectedNode?.current) {
      console.log("Starting mission at node", selectedNode.id);
      // Simulate progression
      setCurrentNodeIndex(prev => Math.min(prev + 1, nodes.length - 1));
    }
  };

  const getNodeStyle = (node: StoryNode) => {
    // Play mode styling
    if (node.id === 'start' || node.completed) {
      return "from-green-600 to-green-700 border-green-500";
    }
    if (node.current) {
      return "from-blue-500 to-blue-600 border-blue-400 animate-pulse";
    }
    
    const opacity = node.available ? '' : 'opacity-50';
    switch (node.storyNodeType) {
      case 'event': return `from-purple-600 to-purple-700 border-purple-500 ${opacity}`;
      case 'boss': return `from-red-600 to-red-700 border-red-500 ${opacity}`;
      case 'final_boss': return `from-orange-600 via-red-600 to-purple-600 border-yellow-500 ${opacity}`;
      default: return node.available 
        ? "from-yellow-500 to-amber-600 border-yellow-400"
        : "from-gray-700 to-gray-800 border-gray-600 opacity-50";
    }
  };

  return (
    <div className="min-h-screen bg-black text-white relative overflow-hidden">
      {/* Cinematic Background Effects - Enhanced Industrial */}
      <div className="fixed inset-0 pointer-events-none">
        {/* Deep space background with industrial gradient */}
        <div className="absolute inset-0" style={{
          background: `
            linear-gradient(135deg, rgba(0, 0, 0, 0.98) 0%, rgba(10, 10, 10, 0.95) 50%, rgba(0, 0, 0, 0.98) 100%),
            radial-gradient(ellipse at top right, rgba(250, 182, 23, 0.01) 0%, transparent 40%),
            radial-gradient(ellipse at bottom left, rgba(139, 92, 246, 0.01) 0%, transparent 40%)
          `
        }} />
        
        {/* Industrial grid pattern */}
        <div className="absolute inset-0 opacity-[0.03]" style={{
          backgroundImage: `
            repeating-linear-gradient(0deg, transparent, transparent 100px, rgba(250, 182, 23, 0.05) 100px, rgba(250, 182, 23, 0.05) 101px),
            repeating-linear-gradient(90deg, transparent, transparent 100px, rgba(250, 182, 23, 0.05) 100px, rgba(250, 182, 23, 0.05) 101px)
          `,
        }} />
        
        {/* Animated scan lines - vertical */}
        <div className="absolute inset-0 opacity-[0.015]" style={{
          backgroundImage: `repeating-linear-gradient(
            0deg,
            transparent,
            transparent 2px,
            rgba(250, 182, 23, 0.1) 2px,
            rgba(250, 182, 23, 0.1) 4px
          )`,
          animation: 'scan 8s linear infinite',
        }} />
        
        {/* Holographic data stream overlay */}
        <div className="absolute inset-0" style={{
          background: `
            radial-gradient(circle at 20% 80%, rgba(250, 182, 23, 0.015) 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.015) 0%, transparent 50%),
            radial-gradient(circle at 40% 40%, rgba(34, 211, 238, 0.008) 0%, transparent 50%),
            linear-gradient(180deg, transparent 0%, rgba(250, 182, 23, 0.005) 50%, transparent 100%)
          `,
          mixBlendMode: 'screen',
        }} />
      </div>
      {/* Header - Enhanced Industrial Command Panel */}
      <div className="relative bg-black/90 border-b-2 border-yellow-500/30 overflow-hidden" style={{
        background: `
          repeating-linear-gradient(
            90deg,
            transparent,
            transparent 100px,
            rgba(250, 182, 23, 0.03) 100px,
            rgba(250, 182, 23, 0.03) 101px
          ),
          linear-gradient(to bottom, rgba(0, 0, 0, 0.95), rgba(0, 0, 0, 0.9))
        `,
        boxShadow: 'inset 0 -2px 10px rgba(250, 182, 23, 0.1)',
      }}>
        {/* Industrial metal texture overlay */}
        <div className="absolute inset-0 pointer-events-none opacity-20" style={{
          backgroundImage: `
            repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(0, 0, 0, 0.1) 2px, rgba(0, 0, 0, 0.1) 3px),
            repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 0, 0, 0.08) 2px, rgba(0, 0, 0, 0.08) 3px)
          `,
        }} />
        
        {/* Header corner accents - enhanced */}
        <div className="absolute top-0 left-0 w-32 h-1 bg-gradient-to-r from-yellow-500 via-yellow-500/50 to-transparent" />
        <div className="absolute top-0 right-0 w-32 h-1 bg-gradient-to-l from-yellow-500 via-yellow-500/50 to-transparent" />
        <div className="absolute bottom-0 left-0 w-1 h-full bg-gradient-to-t from-yellow-500/20 to-transparent" />
        <div className="absolute bottom-0 right-0 w-1 h-full bg-gradient-to-t from-yellow-500/20 to-transparent" />
        
        <div className="relative px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-6">
            <button
              onClick={() => router.push('/scrap-yard')}
              className="group relative px-4 py-2 bg-black/50 border border-yellow-500/30 hover:border-yellow-500 transition-all overflow-hidden"
              style={{
                clipPath: 'polygon(0 0, calc(100% - 8px) 0, 100% 100%, 8px 100%)',
              }}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-yellow-500/10 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700" />
              <span className="relative flex items-center gap-2 font-bold text-yellow-400 uppercase tracking-wider text-sm">
                <span className="text-lg">◄</span> RETREAT
              </span>
            </button>
            
            <div className="relative">
              <div className="absolute -inset-2 bg-yellow-500/5 blur-xl" />
              <h1 className="relative text-3xl font-black text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-yellow-600 uppercase tracking-wider" 
                style={{ fontFamily: "'Orbitron', sans-serif" }}>
                {currentTree || 'CHAPTER 01'}
              </h1>
              <div className="flex items-center gap-4 mt-1">
                <p className="text-xs text-gray-400 uppercase tracking-widest font-medium">
                  SECTOR LIBERATION
                </p>
                <div className="h-3 w-px bg-yellow-500/30" />
                <p className="text-xs text-yellow-500 font-bold">
                  {nodes.filter(n => n.completed).length} / {nodes.length} CLEARED
                </p>
              </div>
            </div>
          </div>
          
          <div className="flex items-center gap-4">
            {/* Mission Status Indicators */}
            <div className="flex gap-2">
              <div className="px-3 py-1.5 bg-green-900/30 border border-green-500/30 rounded">
                <span className="text-xs text-green-400 font-bold">ACTIVE</span>
              </div>
              <div className="px-3 py-1.5 bg-yellow-900/30 border border-yellow-500/30 rounded">
                <span className="text-xs text-yellow-400 font-bold">THREAT: HIGH</span>
              </div>
            </div>
            
            {/* Progress Bar */}
            <div className="w-32">
              <div className="text-[10px] text-gray-500 uppercase tracking-wider mb-1">COMPLETION</div>
              <div className="h-2 bg-black/60 border border-yellow-500/20 relative overflow-hidden">
                <div 
                  className="h-full bg-gradient-to-r from-yellow-600 to-yellow-400 transition-all duration-500"
                  style={{ width: `${(nodes.filter(n => n.completed).length / nodes.length) * 100}%` }}
                />
                <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer" />
              </div>
            </div>
        </div>
        </div>
      </div>

      {/* Main Content - Enhanced Two Column Industrial Layout */}
      <div className="relative flex flex-col lg:flex-row h-[calc(100vh-88px)]">
        {/* Left Column - Tactical Holographic Tree Display */}
        <div className="flex-1 lg:flex-[1.5] min-h-[400px] lg:min-h-0 relative overflow-hidden" style={{
          background: `
            linear-gradient(135deg, rgba(0, 0, 0, 0.98) 0%, rgba(5, 5, 10, 0.95) 100%),
            radial-gradient(ellipse at 30% 70%, rgba(250, 182, 23, 0.02) 0%, transparent 50%),
            radial-gradient(ellipse at 70% 30%, rgba(34, 211, 238, 0.01) 0%, transparent 50%)
          `,
          borderRight: '2px solid rgba(250, 182, 23, 0.2)',
          boxShadow: 'inset 0 0 50px rgba(0, 0, 0, 0.5)',
        }}>
          {/* Enhanced Industrial Map Frame Decoration */}
          <div className="absolute inset-0 pointer-events-none">
            {/* Industrial corner brackets with glow */}
            <div className="absolute top-4 left-4 w-12 h-12">
              <div className="absolute inset-0 border-l-2 border-t-2 border-yellow-500/60" style={{
                filter: 'drop-shadow(0 0 4px rgba(250, 182, 23, 0.3))'
              }} />
              <div className="absolute -top-1 -left-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
            </div>
            <div className="absolute top-4 right-4 w-12 h-12">
              <div className="absolute inset-0 border-r-2 border-t-2 border-yellow-500/60" style={{
                filter: 'drop-shadow(0 0 4px rgba(250, 182, 23, 0.3))'
              }} />
              <div className="absolute -top-1 -right-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
            </div>
            <div className="absolute bottom-4 left-4 w-12 h-12">
              <div className="absolute inset-0 border-l-2 border-b-2 border-yellow-500/60" style={{
                filter: 'drop-shadow(0 0 4px rgba(250, 182, 23, 0.3))'
              }} />
              <div className="absolute -bottom-1 -left-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
            </div>
            <div className="absolute bottom-4 right-4 w-12 h-12">
              <div className="absolute inset-0 border-r-2 border-b-2 border-yellow-500/60" style={{
                filter: 'drop-shadow(0 0 4px rgba(250, 182, 23, 0.3))'
              }} />
              <div className="absolute -bottom-1 -right-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
            </div>
            
            {/* Enhanced HUD overlay elements */}
            <div className="absolute top-8 left-8 text-[10px] text-yellow-500/60 font-mono uppercase tracking-wider">
              <div className="flex items-center gap-2">
                <span className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                <span>MAP // TACTICAL VIEW</span>
              </div>
              <div className="text-gray-500 mt-1">ZOOM: {Math.round(zoomLevel * 100)}%</div>
              <div className="text-gray-600 mt-1">SECTOR: ALPHA-7</div>
            </div>
            
            <div className="absolute top-8 right-8 text-right text-[10px] text-yellow-500/60 font-mono uppercase tracking-wider">
              <div className="flex items-center justify-end gap-2">
                <span>NODE COUNT: {nodes.length}</span>
                <span className="w-2 h-2 bg-yellow-500/50 rounded-full" />
              </div>
              <div className="text-gray-500 mt-1">PATHS: {connections.length}</div>
              <div className="text-gray-600 mt-1">THREAT: {selectedNode?.storyNodeType === 'boss' || selectedNode?.storyNodeType === 'final_boss' ? 'EXTREME' : 'MODERATE'}</div>
            </div>
            
            {/* Multiple animated scan effects */}
            <div className="absolute inset-0 opacity-10" style={{
              background: `linear-gradient(to bottom, transparent 0%, rgba(250, 182, 23, 0.1) 50%, transparent 100%)`,
              height: '20%',
              animation: 'scan 4s linear infinite',
            }} />
            <div className="absolute inset-0 opacity-5" style={{
              background: `linear-gradient(to right, transparent 0%, rgba(34, 211, 238, 0.1) 50%, transparent 100%)`,
              width: '30%',
              animation: 'scanHorizontal 6s linear infinite',
            }} />
            
            {/* Industrial hazard stripes on edges */}
            <div className="absolute bottom-0 left-0 right-0 h-8 opacity-20" style={{
              background: `repeating-linear-gradient(
                45deg,
                transparent,
                transparent 10px,
                rgba(250, 182, 23, 0.2) 10px,
                rgba(250, 182, 23, 0.2) 20px
              )`
            }} />
          </div>
          
          <div className="relative h-full overflow-auto">
          <div className="relative min-h-full flex items-center justify-center p-8">
            {/* Enhanced Canvas Container with cyberpunk holographic effect */}
            <div 
              ref={canvasRef}
              className="relative w-full max-w-[1200px] transition-transform duration-300"
              style={{ 
                aspectRatio: '3/4',
                minHeight: '600px',
                filter: 'contrast(1.15) brightness(1.05)',
                transform: `scale(${zoomLevel})`,
                transformOrigin: 'center center',
              }}
            >
              {/* Enhanced Cyberpunk Grid Background */}
              <div className="absolute inset-0">
                <svg className="w-full h-full">
                  <defs>
                    {/* Main grid pattern with glow */}
                    <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
                      <path d="M 50 0 L 0 0 0 50" fill="none" stroke="rgba(250, 182, 23, 0.15)" strokeWidth="0.5"/>
                      <circle cx="0" cy="0" r="1" fill="rgba(250, 182, 23, 0.3)" />
                      <circle cx="50" cy="0" r="1" fill="rgba(250, 182, 23, 0.3)" />
                      <circle cx="0" cy="50" r="1" fill="rgba(250, 182, 23, 0.3)" />
                      <circle cx="50" cy="50" r="1" fill="rgba(250, 182, 23, 0.3)" />
                    </pattern>
                    {/* Secondary grid for depth */}
                    <pattern id="grid2" width="100" height="100" patternUnits="userSpaceOnUse">
                      <path d="M 100 0 L 0 0 0 100" fill="none" stroke="rgba(34, 211, 238, 0.08)" strokeWidth="1" strokeDasharray="5,5"/>
                    </pattern>
                    {/* Hexagonal overlay pattern */}
                    <pattern id="hexGrid" width="60" height="70" patternUnits="userSpaceOnUse">
                      <polygon points="30,0 60,17.5 60,52.5 30,70 0,52.5 0,17.5" fill="none" stroke="rgba(139, 92, 246, 0.03)" strokeWidth="0.5"/>
                    </pattern>
                    {/* Glow filter for nodes */}
                    <filter id="glow">
                      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                      <feMerge>
                        <feMergeNode in="coloredBlur"/>
                        <feMergeNode in="SourceGraphic"/>
                      </feMerge>
                    </filter>
                  </defs>
                  <rect width="100%" height="100%" fill="url(#grid)" />
                  <rect width="100%" height="100%" fill="url(#grid2)" opacity="0.5" />
                  <rect width="100%" height="100%" fill="url(#hexGrid)" opacity="0.3" />
                </svg>
              </div>

              {/* Enhanced Connections with Cyberpunk Energy Flow */}
              <svg className="absolute inset-0 pointer-events-none">
                <defs>
                  {/* Active path gradient with animation */}
                  <linearGradient id="activeGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stopColor="rgba(250, 182, 23, 0.8)" />
                    <stop offset="25%" stopColor="rgba(250, 182, 23, 0.4)" />
                    <stop offset="50%" stopColor="rgba(34, 211, 238, 0.4)" />
                    <stop offset="75%" stopColor="rgba(250, 182, 23, 0.4)" />
                    <stop offset="100%" stopColor="rgba(250, 182, 23, 0.8)" />
                  </linearGradient>
                  {/* Current path pulsing gradient */}
                  <linearGradient id="currentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stopColor="rgba(59, 130, 246, 0.8)" />
                    <stop offset="50%" stopColor="rgba(34, 211, 238, 0.6)" />
                    <stop offset="100%" stopColor="rgba(59, 130, 246, 0.8)" />
                  </linearGradient>
                  {/* Inactive path gradient */}
                  <linearGradient id="inactiveGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stopColor="rgba(100, 100, 100, 0.2)" />
                    <stop offset="100%" stopColor="rgba(100, 100, 100, 0.1)" />
                  </linearGradient>
                  {/* Glow filter for energy paths */}
                  <filter id="pathGlow" x="-50%" y="-50%" width="200%" height="200%">
                    <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                    <feMerge>
                      <feMergeNode in="coloredBlur"/>
                      <feMergeNode in="SourceGraphic"/>
                    </feMerge>
                  </filter>
                </defs>
                {connections.map((conn, idx) => {
                  const fromNode = nodes.find(n => n.id === conn.from);
                  const toNode = nodes.find(n => n.id === conn.to);
                  if (!fromNode || !toNode) return null;
                  
                  // Use tracked canvas dimensions
                  const centerX = canvasDimensions.width / 2;
                  
                  const x1 = centerX + fromNode.x;
                  const y1 = canvasDimensions.height - fromNode.y - 100;
                  const x2 = centerX + toNode.x;
                  const y2 = canvasDimensions.height - toNode.y - 100;
                  
                  const isActive = fromNode.completed || fromNode.current || fromNode.available;
                  const isCurrent = fromNode.current && toNode.available;
                  const isHighlighted = (selectedNode?.id === fromNode.id || selectedNode?.id === toNode.id);
                  const isSpecialPath = (fromNode.storyNodeType === 'boss' || toNode.storyNodeType === 'boss' || 
                                        fromNode.storyNodeType === 'final_boss' || toNode.storyNodeType === 'final_boss');
                  
                  return (
                    <g key={idx}>
                      {/* Outer glow for special paths */}
                      {isSpecialPath && isActive && (
                        <line
                          x1={x1} y1={y1} x2={x2} y2={y2}
                          stroke="rgba(250, 182, 23, 0.15)"
                          strokeWidth="12"
                          filter="blur(4px)"
                        />
                      )}
                      
                      {/* Shadow/glow for active connections */}
                      {isActive && (
                        <line
                          x1={x1} y1={y1} x2={x2} y2={y2}
                          stroke={isCurrent ? "rgba(59, 130, 246, 0.3)" : "rgba(250, 182, 23, 0.2)"}
                          strokeWidth="8"
                          filter="blur(3px)"
                        />
                      )}
                      
                      {/* Secondary glow line for highlighted paths */}
                      {isHighlighted && (
                        <line
                          x1={x1} y1={y1} x2={x2} y2={y2}
                          stroke="rgba(34, 211, 238, 0.4)"
                          strokeWidth="4"
                          filter="blur(2px)"
                        />
                      )}
                      
                      {/* Main connection line with enhanced styling */}
                      <line
                        x1={x1} y1={y1} x2={x2} y2={y2}
                        stroke={isCurrent ? "url(#currentGradient)" : isActive ? "url(#activeGradient)" : "url(#inactiveGradient)"}
                        strokeWidth={isHighlighted ? "3" : isSpecialPath ? "2.5" : "2"}
                        strokeDasharray={isActive ? "0" : "5,5"}
                        opacity={isHighlighted ? 1 : isActive ? 0.8 : 0.3}
                        filter={isActive ? "url(#pathGlow)" : ""}
                        className={isActive ? "transition-all duration-300" : ""}
                        style={isCurrent ? { animation: 'pulse 2s infinite' } : {}}
                      />
                      
                      {/* Multiple energy pulses for current paths */}
                      {isCurrent && (
                        <>
                          <circle r="4" fill="rgba(59, 130, 246, 0.9)">
                            <animateMotion dur="2s" repeatCount="indefinite">
                              <mpath href={`#path-${idx}`} />
                            </animateMotion>
                          </circle>
                          <circle r="3" fill="rgba(34, 211, 238, 0.8)">
                            <animateMotion dur="2s" repeatCount="indefinite" begin="0.5s">
                              <mpath href={`#path-${idx}`} />
                            </animateMotion>
                          </circle>
                          <circle r="2" fill="rgba(250, 182, 23, 1)">
                            <animateMotion dur="2s" repeatCount="indefinite" begin="1s">
                              <mpath href={`#path-${idx}`} />
                            </animateMotion>
                          </circle>
                        </>
                      )}
                      
                      {/* Single energy pulse for other active paths */}
                      {isActive && !isCurrent && fromNode.completed && (
                        <circle r="3" fill="rgba(250, 182, 23, 0.8)">
                          <animateMotion dur="3s" repeatCount="indefinite">
                            <mpath href={`#path-${idx}`} />
                          </animateMotion>
                        </circle>
                      )}
                      
                      <path
                        id={`path-${idx}`}
                        d={`M ${x1} ${y1} L ${x2} ${y2}`}
                        fill="none"
                        stroke="none"
                      />
                    </g>
                  );
                })}
              </svg>

              {/* Enhanced Nodes with Cyberpunk Holographic Effects */}
              {nodes.map(node => {
                const nodeSize = getNodeSize(node.storyNodeType);
                // Use tracked canvas dimensions
                const centerX = canvasDimensions.width / 2;
                
                const nodeX = centerX + node.x - nodeSize / 2;
                const nodeY = canvasDimensions.height - node.y - 100 - nodeSize / 2;
                
                const isHovered = hoveredNode === node.id;
                const isSelected = selectedNode?.id === node.id;
                const isSpecial = node.storyNodeType === 'boss' || node.storyNodeType === 'final_boss';
                
                return (
                  <div
                    key={node.id}
                    className={`absolute transition-all duration-300 
                      ${node.completed || node.available || node.current ? 'cursor-pointer' : 'cursor-not-allowed'}`}
                    style={{
                      left: `${nodeX}px`,
                      top: `${nodeY}px`,
                      width: `${nodeSize}px`,
                      height: `${nodeSize}px`,
                      transform: isHovered ? 'scale(1.2) rotate(1deg)' : isSelected ? 'scale(1.1)' : 'scale(1)',
                      zIndex: isHovered || isSelected ? 20 : isSpecial ? 5 : 1,
                      filter: isHovered ? 'brightness(1.2)' : '',
                    }}
                    onClick={() => handleNodeClick(node)}
                    onMouseEnter={() => setHoveredNode(node.id)}
                    onMouseLeave={() => setHoveredNode(null)}
                  >
                    {/* Multi-layer Holographic Glow Effects */}
                    {/* Outer glow ring */}
                    {(isHovered || isSelected || node.current || isSpecial) && (
                      <div className="absolute -inset-4 rounded-full" style={{
                        background: node.storyNodeType === 'final_boss' 
                          ? 'radial-gradient(circle, rgba(250, 182, 23, 0.4) 0%, rgba(250, 182, 23, 0.1) 40%, transparent 70%)'
                          : node.storyNodeType === 'boss'
                          ? 'radial-gradient(circle, rgba(239, 68, 68, 0.4) 0%, rgba(239, 68, 68, 0.1) 40%, transparent 70%)'
                          : node.storyNodeType === 'event'
                          ? 'radial-gradient(circle, rgba(139, 92, 246, 0.3) 0%, rgba(139, 92, 246, 0.1) 40%, transparent 70%)'
                          : 'radial-gradient(circle, rgba(250, 182, 23, 0.2) 0%, transparent 70%)',
                        filter: 'blur(12px)',
                        animation: node.current ? 'pulse 2s infinite' : isSpecial ? 'pulse 3s infinite' : '',
                      }} />
                    )}
                    
                    {/* Inner core glow */}
                    {(isHovered || isSelected || node.current) && (
                      <div className="absolute inset-0 rounded-xl" style={{
                        background: `
                          radial-gradient(circle at 30% 30%, 
                            ${node.storyNodeType === 'final_boss' ? 'rgba(250, 182, 23, 0.2)' :
                              node.storyNodeType === 'boss' ? 'rgba(239, 68, 68, 0.2)' :
                              node.storyNodeType === 'event' ? 'rgba(139, 92, 246, 0.2)' :
                              'rgba(34, 211, 238, 0.15)'} 0%, 
                            transparent 50%)
                        `,
                        filter: 'blur(4px)',
                      }} />
                    )}
                    
                    {/* Enhanced Node Container with Cyberpunk Industrial Frame */}
                    <div className={`relative w-full h-full overflow-hidden
                      ${getNodeStyle(node)}
                      ${isSelected ? 'ring-4 ring-yellow-400/80 shadow-2xl shadow-yellow-400/50' : ''}
                      ${isHovered ? 'ring-2 ring-cyan-400/60' : ''}
                    `}
                    style={{
                      borderRadius: isSpecial ? '20%' : '12px',
                      background: `
                        linear-gradient(135deg, 
                          ${node.completed ? 'rgba(34, 197, 94, 0.3)' : 
                            node.current ? 'rgba(59, 130, 246, 0.3)' :
                            node.available ? 'rgba(250, 182, 23, 0.15)' :
                            'rgba(0, 0, 0, 0.4)'} 0%,
                          rgba(0, 0, 0, 0.7) 100%),
                        ${isSpecial ? `radial-gradient(circle at center, 
                          ${node.storyNodeType === 'final_boss' ? 'rgba(250, 182, 23, 0.1)' : 'rgba(239, 68, 68, 0.1)'} 0%, 
                          transparent 60%)` : ''}
                      `,
                      backdropFilter: node.completed || node.available || node.current ? 'blur(6px) brightness(1.1)' : 'blur(2px)',
                      boxShadow: isSpecial ? 'inset 0 0 30px rgba(250, 182, 23, 0.2)' : 'inset 0 0 20px rgba(0, 0, 0, 0.5)',
                    }}>
                      {/* Multi-layer Inner Holographic Patterns */}
                      <div className="absolute inset-0 opacity-40" style={{
                        backgroundImage: `
                          repeating-linear-gradient(
                            45deg,
                            transparent,
                            transparent 3px,
                            ${isSpecial ? 'rgba(250, 182, 23, 0.05)' : 'rgba(255, 255, 255, 0.03)'} 3px,
                            ${isSpecial ? 'rgba(250, 182, 23, 0.05)' : 'rgba(255, 255, 255, 0.03)'} 6px
                          )
                        `,
                      }} />
                      
                      {/* Animated scan line for special nodes */}
                      {isSpecial && (
                        <div className="absolute inset-0 overflow-hidden">
                          <div className="absolute w-full h-px bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-60" 
                            style={{
                              animation: 'scan 2s linear infinite',
                              boxShadow: '0 0 10px rgba(250, 182, 23, 0.5)'
                            }} />
                        </div>
                      )}
                      
                      {/* Data corruption effect for locked nodes */}
                      {!node.available && !node.completed && !node.current && (
                        <div className="absolute inset-0 opacity-20" style={{
                          backgroundImage: `
                            repeating-linear-gradient(
                              0deg,
                              transparent,
                              transparent 2px,
                              rgba(255, 0, 0, 0.1) 2px,
                              rgba(255, 0, 0, 0.1) 3px
                            )
                          `,
                          animation: 'scanHorizontal 10s linear infinite',
                        }} />
                      )}
                      
                      {/* Enhanced Node Content with Cyberpunk Typography */}
                      <div className="relative h-full flex flex-col items-center justify-center p-2">
                        <span className="text-2xl drop-shadow-lg relative" style={{
                          filter: node.storyNodeType === 'final_boss' || node.storyNodeType === 'boss' 
                            ? 'drop-shadow(0 0 12px rgba(250, 182, 23, 0.6))' 
                            : node.storyNodeType === 'event'
                            ? 'drop-shadow(0 0 8px rgba(139, 92, 246, 0.5))'
                            : 'drop-shadow(0 0 4px rgba(34, 211, 238, 0.3))',
                          transform: isHovered ? 'scale(1.1)' : '',
                          transition: 'transform 0.2s',
                        }}>
                          {getNodeIcon(node.storyNodeType)}
                        </span>
                        <span className="text-xs font-black mt-1 text-center px-1 uppercase tracking-wider"
                          style={{ 
                            fontFamily: "'Orbitron', sans-serif",
                            textShadow: isSpecial 
                              ? '0 0 8px rgba(250, 182, 23, 0.6), 0 0 4px rgba(0, 0, 0, 0.8)'
                              : '0 0 4px rgba(0, 0, 0, 0.8)',
                            color: node.completed ? '#4ade80' 
                              : node.current ? '#60a5fa'
                              : node.available ? '#facc15'
                              : '#6b7280',
                          }}>
                          {node.label}
                        </span>
                      </div>
                      
                      {/* Status badges */}
                      {node.current && (
                        <div className="absolute -bottom-4 left-1/2 -translate-x-1/2 px-3 py-1 bg-blue-500 rounded-full text-xs font-bold animate-pulse uppercase tracking-wider"
                          style={{ 
                            boxShadow: '0 0 20px rgba(59, 130, 246, 0.5)',
                            fontFamily: "'Orbitron', sans-serif",
                          }}>
                          ACTIVE
                        </div>
                      )}
                      {node.id === 'start' && (
                        <div className="absolute -bottom-4 left-1/2 -translate-x-1/2 px-3 py-1 bg-green-500 rounded-full text-xs font-bold uppercase tracking-wider"
                          style={{ 
                            boxShadow: '0 0 20px rgba(34, 197, 94, 0.5)',
                            fontFamily: "'Orbitron', sans-serif",
                          }}>
                          ORIGIN
                        </div>
                      )}
                      
                      {/* Enhanced Corner Accents with Glow for Special Nodes */}
                      {isSpecial && (
                        <>
                          <div className="absolute top-0 left-0 w-4 h-4">
                            <div className="absolute inset-0 border-l-2 border-t-2 border-yellow-500" style={{
                              filter: 'drop-shadow(0 0 3px rgba(250, 182, 23, 0.6))'
                            }} />
                            <div className="absolute -top-0.5 -left-0.5 w-1 h-1 bg-yellow-400 rounded-full" />
                          </div>
                          <div className="absolute top-0 right-0 w-4 h-4">
                            <div className="absolute inset-0 border-r-2 border-t-2 border-yellow-500" style={{
                              filter: 'drop-shadow(0 0 3px rgba(250, 182, 23, 0.6))'
                            }} />
                            <div className="absolute -top-0.5 -right-0.5 w-1 h-1 bg-yellow-400 rounded-full" />
                          </div>
                          <div className="absolute bottom-0 left-0 w-4 h-4">
                            <div className="absolute inset-0 border-l-2 border-b-2 border-yellow-500" style={{
                              filter: 'drop-shadow(0 0 3px rgba(250, 182, 23, 0.6))'
                            }} />
                            <div className="absolute -bottom-0.5 -left-0.5 w-1 h-1 bg-yellow-400 rounded-full" />
                          </div>
                          <div className="absolute bottom-0 right-0 w-4 h-4">
                            <div className="absolute inset-0 border-r-2 border-b-2 border-yellow-500" style={{
                              filter: 'drop-shadow(0 0 3px rgba(250, 182, 23, 0.6))'
                            }} />
                            <div className="absolute -bottom-0.5 -right-0.5 w-1 h-1 bg-yellow-400 rounded-full" />
                          </div>
                        </>
                      )}
                      
                      {/* Hexagonal overlay for final boss */}
                      {node.storyNodeType === 'final_boss' && (
                        <div className="absolute inset-0 pointer-events-none" style={{
                          clipPath: 'polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%)',
                          border: '1px solid rgba(250, 182, 23, 0.3)',
                          background: 'linear-gradient(45deg, transparent 40%, rgba(250, 182, 23, 0.05) 50%, transparent 60%)',
                        }} />
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          
          {/* Enhanced Industrial Map Controls */}
          <div className="absolute bottom-4 left-4 flex gap-2">
            <div className="flex bg-black/90 border border-yellow-500/30 overflow-hidden" style={{
              clipPath: 'polygon(0 0, calc(100% - 8px) 0, 100% 100%, 8px 100%)'
            }}>
              <button 
                onClick={() => setZoomLevel(prev => Math.min(prev + 0.2, 2))}
                className="px-4 py-2 hover:bg-yellow-500/10 text-xs text-yellow-400 font-bold uppercase tracking-wider transition-all border-r border-yellow-500/20"
                style={{ fontFamily: "'Orbitron', sans-serif" }}>
                <span className="text-lg">+</span>
              </button>
              <button 
                onClick={() => setZoomLevel(prev => Math.max(prev - 0.2, 0.5))}
                className="px-4 py-2 hover:bg-yellow-500/10 text-xs text-yellow-400 font-bold uppercase tracking-wider transition-all border-r border-yellow-500/20"
                style={{ fontFamily: "'Orbitron', sans-serif" }}>
                <span className="text-lg">−</span>
              </button>
              <button 
                onClick={() => setZoomLevel(1)}
                className="px-4 py-2 hover:bg-yellow-500/10 text-xs text-yellow-400 font-bold uppercase tracking-wider transition-all"
                style={{ fontFamily: "'Orbitron', sans-serif" }}>
                RESET
              </button>
            </div>
          </div>
          
          {/* Additional HUD Elements */}
          <div className="absolute top-1/2 -translate-y-1/2 left-4 flex flex-col gap-2">
            <div className="w-1 h-20 bg-gradient-to-b from-transparent via-yellow-500/30 to-transparent" />
            <div className="w-2 h-2 bg-yellow-500/50 rounded-full animate-pulse" />
            <div className="w-1 h-20 bg-gradient-to-b from-transparent via-yellow-500/30 to-transparent" />
          </div>
          
          <div className="absolute top-1/2 -translate-y-1/2 right-4 flex flex-col gap-2">
            <div className="w-1 h-20 bg-gradient-to-b from-transparent via-cyan-500/30 to-transparent" />
            <div className="w-2 h-2 bg-cyan-500/50 rounded-full animate-pulse" />
            <div className="w-1 h-20 bg-gradient-to-b from-transparent via-cyan-500/30 to-transparent" />
          </div>
        </div>

        {/* Right Column - Enhanced Industrial Briefing Panel */}
        <div className="w-full lg:w-auto lg:flex-1 lg:max-w-[500px] min-h-[300px] lg:min-h-0 relative flex flex-col"
          style={{
            background: `
              linear-gradient(135deg, rgba(0, 0, 0, 0.98) 0%, rgba(10, 10, 10, 0.95) 100%),
              radial-gradient(ellipse at 70% 30%, rgba(250, 182, 23, 0.02) 0%, transparent 50%),
              repeating-linear-gradient(
                135deg,
                transparent,
                transparent 200px,
                rgba(250, 182, 23, 0.01) 200px,
                rgba(250, 182, 23, 0.01) 201px
              )
            `,
            boxShadow: 'inset 0 0 50px rgba(0, 0, 0, 0.5)',
          }}>
          {/* Enhanced Panel frame decoration */}
          <div className="absolute inset-0 pointer-events-none">
            {/* Vertical accent lines with glow */}
            <div className="absolute left-0 top-0 bottom-0 w-px bg-gradient-to-b from-transparent via-yellow-500/60 to-transparent" style={{
              filter: 'drop-shadow(0 0 3px rgba(250, 182, 23, 0.4))'
            }} />
            
            {/* Top panel accent with industrial pattern */}
            <div className="absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-yellow-500/60 via-yellow-500/20 to-transparent" />
            <div className="absolute top-0 left-0 right-0 h-8 opacity-10" style={{
              background: `repeating-linear-gradient(
                90deg,
                transparent,
                transparent 20px,
                rgba(250, 182, 23, 0.2) 20px,
                rgba(250, 182, 23, 0.2) 21px
              )`
            }} />
            
            {/* Metal texture overlay */}
            <div className="absolute inset-0 opacity-5" style={{
              backgroundImage: `
                repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(255, 255, 255, 0.02) 2px, rgba(255, 255, 255, 0.02) 3px),
                repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(255, 255, 255, 0.01) 2px, rgba(255, 255, 255, 0.01) 3px)
              `,
            }} />
            
            {/* Corner accents */}
            <div className="absolute top-4 right-4 w-6 h-6 border-r border-t border-yellow-500/30" />
            <div className="absolute bottom-4 right-4 w-6 h-6 border-r border-b border-yellow-500/30" />
          </div>
          <div className="flex-1 overflow-hidden">
            <IndustrialMissionCard 
              nodeData={selectedNode}
              onStartMission={handleStartMission}
              simulateProgress={() => setCurrentNodeIndex(prev => Math.min(prev + 1, nodes.length - 1))}
            />
          </div>
        </div>
      </div>
    </div>
  );
}